use clap::Parser;
use clap::ValueEnum;
use tracing::Level;
#[derive(Parser)]
pub struct AuthArgs {
  /// Specify the user authentication file (generated by `user` subcommand)
  #[arg(short, long)]
  pub file: String,

  /// Log level
  #[clap(short, long, default_value = "info")]
  pub log_level: LogLevel,

  /// Timeout for udp connection, in seconds
  #[clap(short, long, default_value = "5")]
  pub timeout: u64,

  /// Retry count for authentication, leave it empty for infinite retry
  #[clap(short, long)]
  pub retry: Option<u64>,

  /// Retry delay for authentication, in milliseconds
  #[clap(short, long, default_value = "500")]
  pub delay: u64,
}

#[derive(Debug, ValueEnum, Clone)]
pub enum LogLevel {
  Trace,
  Debug,
  Info,
  Warn,
  Error,
}

impl From<LogLevel> for Level {
  fn from(level: LogLevel) -> Self {
    match level {
      LogLevel::Trace => Level::TRACE,
      LogLevel::Debug => Level::DEBUG,
      LogLevel::Info => Level::INFO,
      LogLevel::Warn => Level::WARN,
      LogLevel::Error => Level::ERROR,
    }
  }
}
